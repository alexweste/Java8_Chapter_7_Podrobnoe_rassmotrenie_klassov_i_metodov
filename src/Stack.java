/* В качестве более реального примера организации управления доступом рассмотрим переделанный
вариант класса Stack (первый вариант рассматривался в Chpter 6)

В данном классе определяется целочисленный стек, который может
содержать 10 значений
 */
class Stack {
    /* В данном случае переменные stck и tos являются зактытыми.
    Это означает, что они не могут быть случайно или
    намеренно изменены таким образом, чтобы нарушить стек.
     */
    private int stck[] = new int[10];
    private int tos;

    // Инициализируем вершину стека
    Stack() {
        tos = -1;
    }

    // Размещаем элемент в стеке
    void push(int item){
        if(tos==9)
            System.out.println("Cтек заполнен.");
        else
            stck[++tos] = item;
    }

    // Извлекаем элемент из стека
    int pop() {
        if(tos < 0) {
            System.out.println("Стек не загружен.");
            return 0;
        }
        else
            return stck[tos--];
    }
}
